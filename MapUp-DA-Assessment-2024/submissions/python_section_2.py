# -*- coding: utf-8 -*-
"""python_section_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d2ReY0U9w2U3grlAmf7W135xaNF2gOIy
"""

import pandas as pd
import numpy as np

df = pd.read_csv('dataset-2.csv')
df.head()

def calculate_distance_matrix(df):
   """
    Calculate a distance matrix based on the dataframe, df.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame: Symmetric distance matrix with cumulative distances.
    """
 # Create a list of unique toll locations from the 'id_start' and 'id_end' columns
    all_ids = pd.unique(df[['id_start', 'id_end']].values.ravel('K'))
    all_ids.sort()

# Create an empty DataFrame with toll locations as both rows and columns
    distance_matrix = pd.DataFrame(index=all_ids, columns=all_ids, data=float('inf'))

# Set diagonal values to 0 (distance from a location to itself is 0)
    for id in all_ids:
        distance_matrix.loc[id, id] = 0

# Populate the distance matrix with distances from the original DataFrame
    for _, row in df.iterrows():
        id_start, id_end, dist = row['id_start'], row['id_end'], row['distance']

        # Update the distance for both directions
        distance_matrix.loc[id_start, id_end] = dist
        distance_matrix.loc[id_end, id_start] = dist

   # Applied Floyd-Warshall algorithm to find shortest paths
    for k in all_ids:  # Iterate over each intermediary toll location
        for i in all_ids:  # For each starting location
            for j in all_ids:  # For each ending location

                # Check if the path through k is shorter than the current known distance
                  if distance_matrix.loc[i, j] > distance_matrix.loc[i, k] + distance_matrix.loc[k, j]:
                    distance_matrix.loc[i, j] = distance_matrix.loc[i, k] + distance_matrix.loc[k, j]

  # Return the completed distance matrix
    return distance_matrix

distance_matrix = calculate_distance_matrix(df)
distance_matrix.head()

def unroll_distance_matrix(distance_matrix):
  """
    Unroll a distance matrix into a DataFrame where each row represents a unique combination of
    id_start, id_end, and the corresponding distance.

    Args:
        distance_matrix (pandas.DataFrame): A DataFrame where both the rows and columns represent IDs,
                                            and the values represent distances between them.

    Returns:
        pandas.DataFrame: A DataFrame containing three columns: id_start, id_end, and distance.
                          Each row represents a pair of IDs and the distance between them.
    """
    # Initialize an empty list to store the unrolled data
    unrolled_data = []

# Iterate through each starting toll location in the distance matrix
    for id_start in distance_matrix.index:
        for id_end in distance_matrix.columns:

  # Only process if the starting and ending locations are different
            if id_start != id_end:

              # Retrieve the distance between the starting and ending locations
                distance = distance_matrix.loc[id_start, id_end]

               # Append the data as a dictionary to the list
                unrolled_data.append({'id_start': id_start, 'id_end': id_end, 'distance': distance})

# Create a DataFrame from the unrolled data
    unrolled_df = pd.DataFrame(unrolled_data)

    return unrolled_df

unrolled_df = unroll_distance_matrix(distance_matrix)
unrolled_df.head()

def find_ids_within_ten_percentage_threshold(df, reference_id):
    """
    Find IDs whose average distance is within 10% of the reference ID's average distance.

    Args:
        df (pandas.DataFrame): DataFrame with columns id_start, id_end, and distance.
        reference_id (int): The reference ID to compare distances against.

    Returns:
        List: IDs with average distance within 10% of the reference ID's average distance.
    """
    # Get the average distance for the reference ID
    reference_avg_distance = df[df['id_start'] == reference_id]['distance'].mean()

    # Calculate the 10% threshold range
    lower_limit = reference_avg_distance * 0.9
    upper_limit = reference_avg_distance * 1.1

    # Find all IDs whose average distance is within the 10% range
    id_avg_distances = df.groupby('id_start')['distance'].mean().reset_index()
    ids_in_range = id_avg_distances[
        (id_avg_distances['distance'] >= lower_limit) &
        (id_avg_distances['distance'] <= upper_limit)
    ]['id_start'].tolist()

    # Return the sorted list of IDs
    return sorted(ids_in_range)

result = find_ids_within_ten_percentage_threshold(df, reference_id=1001402)
print(result)

def calculate_toll_rate(df):
   """
    Calculate toll rates for each vehicle type based on the unrolled DataFrame.

    Args:
        df (pandas.DataFrame): The DataFrame containing id_start, id_end, and distance.

    Returns:
        pandas.DataFrame: DataFrame with additional columns for each vehicle type's toll rates.
    """
  # Define rate coefficients for each vehicle type
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }

 # Calculate toll rates for each vehicle type
    for vehicle, rate in rate_coefficients.items():
        df[vehicle] = df['distance'] * rate

    return df

toll_df = calculate_toll_rate(unrolled_df)
toll_df.head(10)

def calculate_time_based_toll_rates(df) -> pd.DataFrame:
    """
    Calculate time-based toll rates for different time intervals within a day.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame
    """
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }
# Define discounts for different time intervals during weekdays
    weekday_discounts = {
        '00:00:00-10:00:00': 0.8,
        '10:00:00-18:00:00': 1.2,
        '18:00:00-23:59:59': 0.8
    }
    # Define a general discount for weekends
    weekend_discount = 0.7

   # Define time ranges using Python's `time` function
    time_ranges = {
        '00:00:00-10:00:00': (time(0, 0, 0), time(10, 0, 0)),
        '10:00:00-18:00:00': (time(10, 0, 0), time(18, 0, 0)),
        '18:00:00-23:59:59': (time(18, 0, 0), time(23, 59, 59))
    }
# Define time periods for each day and time range with associated discount factors
    periods = [

        ('Monday', 'Friday', weekday_discounts['00:00:00-10:00:00'], time(0, 0, 0), time(10, 0, 0)),
        ('Tuesday', 'Saturday', weekday_discounts['10:00:00-18:00:00'], time(10, 0, 0), time(18, 0, 0)),
        ('Wednesday', 'Sunday', weekday_discounts['18:00:00-23:59:59'], time(18, 0, 0), time(23, 59, 59)),
    # Weekend period with a general discount for all day
        ('Saturday', 'Sunday', weekend_discount, time(0, 0, 0), time(23, 59, 59))
    ]

# Create a list to store the results
    result_data = []

# Iterate over each row in the DataFrame
    for _, row in df.iterrows():
        id_start = row['id_start']
        id_end = row['id_end']
        distance = row['distance']

# Calculate base tolls for each vehicle type based on distance and rate coefficients
        base_tolls = {vehicle: distance * rate for vehicle, rate in rate_coefficients.items()}

# Iterate through the defined periods and calculate adjusted toll rates
        for start_day, end_day, discount_factor, start_time, end_time in periods:

# Apply the discount factor to each vehicle's base toll rate
            adjusted_tolls = {vehicle: base_toll * discount_factor for vehicle, base_toll in base_tolls.items()}

# Append the calculated toll rates along with the relevant time period
            result_data.append({
                'id_start': id_start,
                'id_end': id_end,
                'start_day': start_day,
                'start_time': start_time,
                'end_day': end_day,
                'end_time': end_time,
                **adjusted_tolls
            })
# Convert the list of dictionaries to a DataFrame
    result_df = pd.DataFrame(result_data)

    return result_df

time_based_toll_rate_df = calculate_time_based_toll_rates(unrolled_df)
print(time_based_toll_rate_df)